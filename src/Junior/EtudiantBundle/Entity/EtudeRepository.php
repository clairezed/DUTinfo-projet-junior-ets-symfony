<?php

namespace Junior\EtudiantBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EtudeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtudeRepository extends EntityRepository {

    public function findEtudesbyStudentAndStatut($idStudent, $statut) {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.participants', 'part')
                ->addSelect('part')
                ->leftJoin('part.etudiant', 'etudiant')
                ->addSelect('etudiant');

        $qb->where('e.statutEtude = :statut')
                ->setParameter('statut', $statut)
                ->andWhere('etudiant.id = :id')
                ->setParameter('id', $idStudent)
        ;

        return $qb
//                ->getQuery()
//                        ->getResult()
        ;
    }

    public function findEtudesbyStudent($idStudent) {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.participants', 'part')
                ->addSelect('part')
                ->leftJoin('part.etudiant', 'etudiant')
                ->addSelect('etudiant')
        ;

        $qb->where('etudiant.id = :id')
                ->setParameter('id', $idStudent)
        ;

        return $qb
                        ->getQuery()
                        ->getResult()
        ;
    }

    public function findParticipantsbyEtude($idEtude) {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.participants', 'part')
                ->addSelect('part')
                ->leftJoin('part.etudiant', 'etudiant')
                ->addSelect('etudiant');

        $qb->where('e.id = :id')
                ->setParameter('id', $idEtude);

        return $qb;
    }

    public function findParticipantbyEtudiant($idEtudiant) {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.participants', 'part')
                ->addSelect('part')
                ->leftJoin('part.etudiant', 'etudiant')
                ->addSelect('etudiant');

        $qb->where('etudiant.id = :id')
                ->setParameter('id', $idEtudiant);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findRFbyEtude($etude, $listRF) {
        $rfEtude = array(NULL);
        $cpt = 0;
        $bool = "false";
        foreach ($listRF as $rf) {
            $listFrais = $rf->getFrais();
            foreach ($listFrais as $frais) {
                if ($frais->getEtude() == $etude) {
                    $bool = "true";
                }
            }
            if ($bool == "true") {
                $rfEtude[$cpt] = $rf;
                $bool = "false";
                $cpt++;
            }
        }
        return $rfEtude;
    }

    public function findMontantRFbyEtude($etude, $rf) {
        $montantRF = 0;
        $bool = "false";
        $listFrais = $rf->getFrais();
        foreach ($listFrais as $frais) {
            if ($frais->getEtude() == $etude) {
                $bool = "true";
            }
            if ($bool == "true") {
                $montantRF += $frais->getMontantFrais();
                $bool = "false";
            }
        }
        return $montantRF;
    }
    
    public function findResponsable($etude) {
        $participants = $etude->getParticipants();
        foreach($participants as $etudiant) {
            if($etudiant->getStatutEtudiant() == 'Responsable') {
                $responsable = $etudiant;
            }
        }
        return $responsable;
    }
    
    public function findRealisateurs($etude) {
        $participants = $etude->getParticipants();
        $realisateurs = array(NULL);
        $cpt = 0;
        foreach($participants as $etudiant) {
            if($etudiant->getStatutEtudiant() == 'Participant') {
                $realisateurs[$cpt] = $etudiant;
                $cpt++;
            }
        }
        return $realisateurs;
    }

}
